//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/RayCastClass/PjInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PjInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PjInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PjInputs"",
    ""maps"": [
        {
            ""name"": ""MoveMap"",
            ""id"": ""4def720b-629e-41e3-9140-a2a01432be9a"",
            ""actions"": [
                {
                    ""name"": ""RotateCameraY"",
                    ""type"": ""Value"",
                    ""id"": ""55a39338-2bc9-47f1-8251-37f43e7ed751"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RotatePjY"",
                    ""type"": ""Value"",
                    ""id"": ""0a7acefa-083f-4145-9cf4-694e32b97ec4"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MovePj"",
                    ""type"": ""Value"",
                    ""id"": ""f79bbff3-fe79-4593-b512-e756dfbeba1f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""896be585-fe5b-4668-921e-69e770acf5f4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c05af9d6-2821-4ee4-b781-a86ddb5db513"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotatePjY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""420d851a-5c8e-42a8-931c-f5a99f6c8b6e"",
                    ""path"": ""<Mouse>/delta/y"",
                    ""interactions"": """",
                    ""processors"": ""Invert"",
                    ""groups"": """",
                    ""action"": ""RotateCameraY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""d91886a4-8d80-4ad9-917b-d5b83edffb92"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePj"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""8ee867eb-1eaf-4e35-8476-175349816293"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePj"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""2f313120-b39a-41f4-a301-8f67a9738be8"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePj"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b2ec530b-c7b8-42f2-9a6b-dcb6eed72ebf"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePj"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""9b3157f7-e576-4359-814c-27cca307cfff"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePj"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""65b22f96-fdc8-47c2-9793-77099c00a50e"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MoveMap
        m_MoveMap = asset.FindActionMap("MoveMap", throwIfNotFound: true);
        m_MoveMap_RotateCameraY = m_MoveMap.FindAction("RotateCameraY", throwIfNotFound: true);
        m_MoveMap_RotatePjY = m_MoveMap.FindAction("RotatePjY", throwIfNotFound: true);
        m_MoveMap_MovePj = m_MoveMap.FindAction("MovePj", throwIfNotFound: true);
        m_MoveMap_Interact = m_MoveMap.FindAction("Interact", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MoveMap
    private readonly InputActionMap m_MoveMap;
    private List<IMoveMapActions> m_MoveMapActionsCallbackInterfaces = new List<IMoveMapActions>();
    private readonly InputAction m_MoveMap_RotateCameraY;
    private readonly InputAction m_MoveMap_RotatePjY;
    private readonly InputAction m_MoveMap_MovePj;
    private readonly InputAction m_MoveMap_Interact;
    public struct MoveMapActions
    {
        private @PjInputs m_Wrapper;
        public MoveMapActions(@PjInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @RotateCameraY => m_Wrapper.m_MoveMap_RotateCameraY;
        public InputAction @RotatePjY => m_Wrapper.m_MoveMap_RotatePjY;
        public InputAction @MovePj => m_Wrapper.m_MoveMap_MovePj;
        public InputAction @Interact => m_Wrapper.m_MoveMap_Interact;
        public InputActionMap Get() { return m_Wrapper.m_MoveMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MoveMapActions set) { return set.Get(); }
        public void AddCallbacks(IMoveMapActions instance)
        {
            if (instance == null || m_Wrapper.m_MoveMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MoveMapActionsCallbackInterfaces.Add(instance);
            @RotateCameraY.started += instance.OnRotateCameraY;
            @RotateCameraY.performed += instance.OnRotateCameraY;
            @RotateCameraY.canceled += instance.OnRotateCameraY;
            @RotatePjY.started += instance.OnRotatePjY;
            @RotatePjY.performed += instance.OnRotatePjY;
            @RotatePjY.canceled += instance.OnRotatePjY;
            @MovePj.started += instance.OnMovePj;
            @MovePj.performed += instance.OnMovePj;
            @MovePj.canceled += instance.OnMovePj;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
        }

        private void UnregisterCallbacks(IMoveMapActions instance)
        {
            @RotateCameraY.started -= instance.OnRotateCameraY;
            @RotateCameraY.performed -= instance.OnRotateCameraY;
            @RotateCameraY.canceled -= instance.OnRotateCameraY;
            @RotatePjY.started -= instance.OnRotatePjY;
            @RotatePjY.performed -= instance.OnRotatePjY;
            @RotatePjY.canceled -= instance.OnRotatePjY;
            @MovePj.started -= instance.OnMovePj;
            @MovePj.performed -= instance.OnMovePj;
            @MovePj.canceled -= instance.OnMovePj;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
        }

        public void RemoveCallbacks(IMoveMapActions instance)
        {
            if (m_Wrapper.m_MoveMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMoveMapActions instance)
        {
            foreach (var item in m_Wrapper.m_MoveMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MoveMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MoveMapActions @MoveMap => new MoveMapActions(this);
    public interface IMoveMapActions
    {
        void OnRotateCameraY(InputAction.CallbackContext context);
        void OnRotatePjY(InputAction.CallbackContext context);
        void OnMovePj(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
    }
}
