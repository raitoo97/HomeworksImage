//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/InpuutsClass/Controller.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controller: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controller()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controller"",
    ""maps"": [
        {
            ""name"": ""NormalMap"",
            ""id"": ""2e42accb-6953-458b-9245-a7be425ca081"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""112563dd-06b1-43db-915f-18f34e6e9ffc"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""7b22d381-9455-4b03-ae0d-03b9ab154711"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""07123fef-0c9e-4b81-a716-00f242213c5e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e90dc5f0-1bb4-4a55-9388-5e70f15590f1"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c981db8b-93f2-4191-a744-a154eb53e312"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""58904f05-b547-4152-ab46-95aaa81e47ca"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""fd3178dd-f824-4a2a-9a01-6c3ae6afcf02"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""ff1d92e0-7255-4b52-8865-fcfab7b6db2a"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""SuperMap"",
            ""id"": ""fce51ac2-76af-4df3-b6ab-82cb3ba4f197"",
            ""actions"": [
                {
                    ""name"": ""SecondJump"",
                    ""type"": ""Button"",
                    ""id"": ""5052e5a2-1f17-4a8f-bfa0-831f810d2269"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a4f4c3da-ab07-4556-81ef-aa11f1dd5ccf"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondJump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // NormalMap
        m_NormalMap = asset.FindActionMap("NormalMap", throwIfNotFound: true);
        m_NormalMap_Move = m_NormalMap.FindAction("Move", throwIfNotFound: true);
        m_NormalMap_Jump = m_NormalMap.FindAction("Jump", throwIfNotFound: true);
        // SuperMap
        m_SuperMap = asset.FindActionMap("SuperMap", throwIfNotFound: true);
        m_SuperMap_SecondJump = m_SuperMap.FindAction("SecondJump", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // NormalMap
    private readonly InputActionMap m_NormalMap;
    private List<INormalMapActions> m_NormalMapActionsCallbackInterfaces = new List<INormalMapActions>();
    private readonly InputAction m_NormalMap_Move;
    private readonly InputAction m_NormalMap_Jump;
    public struct NormalMapActions
    {
        private @Controller m_Wrapper;
        public NormalMapActions(@Controller wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_NormalMap_Move;
        public InputAction @Jump => m_Wrapper.m_NormalMap_Jump;
        public InputActionMap Get() { return m_Wrapper.m_NormalMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(NormalMapActions set) { return set.Get(); }
        public void AddCallbacks(INormalMapActions instance)
        {
            if (instance == null || m_Wrapper.m_NormalMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_NormalMapActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
        }

        private void UnregisterCallbacks(INormalMapActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
        }

        public void RemoveCallbacks(INormalMapActions instance)
        {
            if (m_Wrapper.m_NormalMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(INormalMapActions instance)
        {
            foreach (var item in m_Wrapper.m_NormalMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_NormalMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public NormalMapActions @NormalMap => new NormalMapActions(this);

    // SuperMap
    private readonly InputActionMap m_SuperMap;
    private List<ISuperMapActions> m_SuperMapActionsCallbackInterfaces = new List<ISuperMapActions>();
    private readonly InputAction m_SuperMap_SecondJump;
    public struct SuperMapActions
    {
        private @Controller m_Wrapper;
        public SuperMapActions(@Controller wrapper) { m_Wrapper = wrapper; }
        public InputAction @SecondJump => m_Wrapper.m_SuperMap_SecondJump;
        public InputActionMap Get() { return m_Wrapper.m_SuperMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SuperMapActions set) { return set.Get(); }
        public void AddCallbacks(ISuperMapActions instance)
        {
            if (instance == null || m_Wrapper.m_SuperMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SuperMapActionsCallbackInterfaces.Add(instance);
            @SecondJump.started += instance.OnSecondJump;
            @SecondJump.performed += instance.OnSecondJump;
            @SecondJump.canceled += instance.OnSecondJump;
        }

        private void UnregisterCallbacks(ISuperMapActions instance)
        {
            @SecondJump.started -= instance.OnSecondJump;
            @SecondJump.performed -= instance.OnSecondJump;
            @SecondJump.canceled -= instance.OnSecondJump;
        }

        public void RemoveCallbacks(ISuperMapActions instance)
        {
            if (m_Wrapper.m_SuperMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISuperMapActions instance)
        {
            foreach (var item in m_Wrapper.m_SuperMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SuperMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SuperMapActions @SuperMap => new SuperMapActions(this);
    public interface INormalMapActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
    public interface ISuperMapActions
    {
        void OnSecondJump(InputAction.CallbackContext context);
    }
}
